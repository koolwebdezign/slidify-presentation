1+2
3*34
sqrt(16)
sqrt(2)
install.packages("rJava")
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
library(rJava)
library(rJava)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
library(rJava)
library(rJava)
install.packages("rJava")
install.packages("rJava")
library(rJava)
library(rJava)
install.packages("xlsx")
library(xlsx)
ls()
library(rJava)
library(swirl)
library("swirl")
library('swirl')
install.packages("swirl")
library("swirl")
swirl()
33/36
deck
52
4/52
5/(52*5)
(1/52)*(1/51)*(1/50)*(1/49)*(1/48)
12/52
2/51
0.64
.64
mypdf
integrate(pypdf, 0, 1.6)
integrate(mypdf, 0, 1.6)
0.8
1
info()
sqrt(2)
.997*.001
(1-.985)*(1-.001)
0.000997/(0.000997+0.014985)
install.packages("lazyeval")
install.packages("lazyeval")
install.packages("ggplot2")
swirl()
library("swirl")
swirl()
0.5
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5(edh+edl)
.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
library("swirl")
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=2,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta=100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta=2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta=100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power=.8, n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power=.8, n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
library("swirl")
swirl()
install_from_swirl("Regression Models")
swirl()
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
library("swirl")
swirl()
fit <- lm(child~parent,galton)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ . - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination,Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
exists()
install.packages(c("assertthat", "BH", "boot", "chron", "class", "cluster", "codetools", "curl", "data.table", "DBI", "digest", "dplyr", "evaluate", "foreign", "formatR", "htmltools", "jsonlite", "knitr", "lattice", "markdown", "MASS", "Matrix", "mgcv", "nlme", "nnet", "R6", "Rcpp", "rJava", "rmarkdown", "rpart", "rsconnect", "spatial", "stringi", "stringr", "survival", "tibble", "yaml"))
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x), x=slider(1,100))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(galton)
require(HistData)
install.packages("HistData")
require(HistData)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
require(HistData)
data("Galton")
hist(Galton$child)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
+     hist(Galton$child,col="blue",breaks=100)
+     lines(c(mu, mu), c(0, 150),col="red",lwd=5)
+     mse <- mean((Galton$child - mu)^2)
+     text(63, 150, paste("mu = ", mu))
+     text(63, 140, paste("MSE = ", round(mse, 2)))
+ }
myHist <- function(mu){hist(Galton$child,col="blue",breaks=100)
+     lines(c(mu, mu), c(0, 150),col="red",lwd=5)
+     mse <- mean((Galton$child - mu)^2)
+     text(63, 150, paste("mu = ", mu))
+     text(63, 140, paste("MSE = ", round(mse, 2)))
+ }
myHist <- function(mu){hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((Galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2))) }
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
install.packages("rtools")
install.packages("rtools")
install.packages("rtools")
install.packages("rtools")
install.packages("Rtools")
install.packages("GoogleVis")
install.packages("googleVis")
install.packages("plotly")
install.packages("tidyr")
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
setwd("C:/Users/j12welch/DataScienceProjects/slidify-presentation")
author("my-shiny-app")
library(slidify)
author("my-shiny-app")
